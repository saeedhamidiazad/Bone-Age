# -*- coding: utf-8 -*-
"""XRAY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cfka5VmiqY_1OxPidkkfvA93L01hIlkg
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import shutil
import os
import numpy as np

from google.colab import drive
drive.mount('/content/drive/')

batch_size = 8
img_height = 224
img_width = 224

main_dir = '/content/drive/My Drive/JPEGimage02'

train_ds, validation_ds = tf.keras.utils.image_dataset_from_directory(
    main_dir,
    labels='inferred',
    label_mode='int',
    color_mode='rgb',
    subset='both',
    validation_split=0.2,
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

for images, labels in train_ds.take(1):
    print(labels[0])
    break

plt.figure(figsize=(5,5))
for images, labels in train_ds.take(1):
    for i in range(8):
        plt.subplot(2, 4, i+1)
        plt.xticks([])
        plt.yticks([])
        plt.imshow(np.asarray(images[i]).astype("uint8"))
        plt.title(class_names[labels[i]])
plt.show()

normalization_layer = tf.keras.layers.Rescaling(1./255)

train_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
validation_ds = validation_ds.map(lambda x, y: (normalization_layer(x), y))

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Input(shape=(224, 224, 3)))

model.add(tf.keras.layers.Conv2D(96, (5, 5), padding="same"))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.MaxPooling2D())

model.add(tf.keras.layers.Conv2D(2048, (5, 5), padding="same"))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.MaxPooling2D())

model.add(tf.keras.layers.Conv2D(2048, (3, 3), padding="same"))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.MaxPooling2D())

model.add(tf.keras.layers.Conv2D(2048, (3, 3), padding="same"))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.MaxPooling2D())

model.add(tf.keras.layers.Conv2D(2048, (3, 3), padding="same"))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.MaxPooling2D())

model.add(tf.keras.layers.Conv2D(2048, (3, 3), padding="same"))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.MaxPooling2D())


model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Dense(1))

model.build(input_shape=(224, 224, 3))
model.summary()

AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
validation_ds = validation_ds.cache().prefetch(buffer_size=AUTOTUNE)

adam = tf.keras.optimizers.Adam(learning_rate=0.002)
model.compile(loss=tf.keras.losses.MAE, optimizer=adam, metrics=['mae'])

model.fit(train_ds, epochs=40, shuffle=True, validation_data=validation_ds)

model.evaluate(validation_ds)

plt.figure(figsize=(15,15))
for images, labels in train_ds.take(1):
    predictions = model.predict(images)
    for i in range(8):
        plt.subplot(2, 4, i+1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(images[i], cmap=plt.cm.binary)
        plt.title("Predict: " + str(predictions[i])+  ", Real: " + str(class_names[labels[i]]))
    plt.show()
    break